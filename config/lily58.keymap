/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            key-positions = <13 14>;
            bindings = <&kp ESC>;
            layers = <0>;
        };

        skob {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <31 32>;
            layers = <0 2 1>;
        };

        skobb {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <32 33>;
            layers = <0 2 1>;
        };

        del {
            bindings = <&kp BACKSPACE>;
            key-positions = <21 22>;
        };

        x {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <33 34>;
            layers = <0>;
        };

        hard {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <45 46>;
            layers = <0>;
        };

        questionRus {
            bindings = <&kp AMPERSAND>;
            key-positions = <21 19>;
            layers = <0>;
        };

        opaa {
            bindings = <&kp EXCLAMATION>;
            key-positions = <21 18>;
        };

        scoben {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <19 20>;
            layers = <1>;
        };

        scobenn {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <20 21>;
            layers = <1>;
        };

        rusToEn {
            bindings = <&to 1>;
            key-positions = <30 34>;
            layers = <0>;
        };

        enToRus {
            bindings = <&to 0>;
            key-positions = <30 34>;
            layers = <1>;
        };

        questionEn {
            bindings = <&kp QUESTION>;
            key-positions = <19 21>;
            layers = <1>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        rus {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE   &kp SPACE                         &kp SPACE  &kp SPACE   &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE
&kp SPACE  &kp Q      &kp W      &kp E      &kp R       &kp T                             &kp Y      &kp U       &kp I      &kp O      &kp P      &kp SPACE
&kp SPACE  &kp A      &kp S      &kp D      &kp F       &kp G                             &kp H      &kp J       &kp K      &kp L      &kp SEMI   &kp SPACE
&kp SPACE  &kp Z      &kp X      &kp C      &kp V       &kp B      &sl 2       &kp ENTER  &kp N      &kp M       &kp COMMA  &kp DOT    &kp APOS   &kp SPACE
                                 &kp TAB    &kp DELETE  &kp LSHFT  &kp LALT    &kp SPACE  &kp LCTRL  &kp KP_DOT  &kp FSLH
            >;
        };

        en {
            bindings = <
&kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE   &kp SPACE                         &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE
&kp SPACE  &kp GRAVE  &kp BSLH   &kp SEMI   &kp P       &kp Y                             &kp F      &kp G      &kp C      &kp R      &kp L      &kp SPACE
&kp SPACE  &kp A      &kp O      &kp E      &kp U       &kp I                             &kp D      &kp H      &kp T      &kp N      &kp S      &kp SPACE
&kp SPACE  &kp APOS   &kp Q      &kp J      &kp K       &kp X      &sl 2       &kp ENTER  &kp B      &kp M      &kp W      &kp V      &kp Z      &kp SPACE
                                 &kp TAB    &kp DELETE  &kp LSHFT  &kp LALT    &kp SPACE  &kp LCTRL  &kp COMMA  &kp DOT
            >;
        };

        num {
            bindings = <
&kp SPACE  &kp SPACE    &kp SPACE      &kp SPACE       &kp SPACE  &kp SPACE                           &kp SPACE        &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE      &kp SPACE
&kp SPACE  &kp AT_SIGN  &kp AMPERSAND  &kp UP          &kp POUND  &kp DOLLAR                          &kp KP_ASTERISK  &kp N7     &kp N8     &kp N9     &kp KP_DIVIDE  &kp SPACE
&kp SPACE  &kp PERCENT  &kp LEFT       &kp DOWN_ARROW  &kp RIGHT  &kp CARET                           &kp KP_PLUS      &kp N4     &kp N5     &kp N6     &kp KP_MINUS   &kp SPACE
&kp SPACE  &kp F1       &kp F2         &kp F3          &kp F4     &kp F5      &kp SPACE    &kp ENTER  &kp NUMBER_0     &kp N1     &kp N2     &kp N3     &kp KP_EQUAL   &kp SPACE
                                       &kp TAB         &kp BSPC   &kp LSHFT   &kp LALT     &kp SPACE  &kp LCTRL        &kp SPACE  &kp SPACE
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};
